digraph "CFG for 'handle_aiocb_flush' function" {
	label="CFG for 'handle_aiocb_flush' function";

	Node0x5558232605b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{entry:\l  call void @llvm.dbg.value(metadata i8* %opaque, metadata !2859, metadata\l... !DIExpression()), !dbg !2973\l  call void @llvm.dbg.value(metadata i8* %opaque, metadata !2860, metadata\l... !DIExpression()), !dbg !2973\l  %bs = bitcast i8* %opaque to %struct.BlockDriverState**, !dbg !2974\l  %0 = load %struct.BlockDriverState*, %struct.BlockDriverState** %bs, align\l... 8, !dbg !2974\l  %opaque1 = getelementptr inbounds %struct.BlockDriverState,\l... %struct.BlockDriverState* %0, i64 0, i32 8, !dbg !2975\l  %1 = bitcast i8** %opaque1 to %struct.BDRVRawState**, !dbg !2975\l  %2 = load %struct.BDRVRawState*, %struct.BDRVRawState** %1, align 8, !dbg\l... !2975\l  call void @llvm.dbg.value(metadata %struct.BDRVRawState* %2, metadata !2896,\l... metadata !DIExpression()), !dbg !2973\l  %page_cache_inconsistent = getelementptr inbounds %struct.BDRVRawState,\l... %struct.BDRVRawState* %2, i64 0, i32 12, !dbg !2976\l  %bf.load = load i8, i8* %page_cache_inconsistent, align 8, !dbg !2976\l  %3 = and i8 %bf.load, 32, !dbg !2976\l  %bf.cast = icmp eq i8 %3, 0, !dbg !2976\l  br i1 %bf.cast, label %if.end, label %cleanup, !dbg !2978, !prof !2979\l|{<s0>T|<s1>F}}"];
	Node0x5558232605b0:s0 -> Node0x555823266330;
	Node0x5558232605b0:s1 -> Node0x555823266da0;
	Node0x555823266330 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{if.end:                                           \l  call void @llvm.dbg.value(metadata i8* %opaque, metadata !2860, metadata\l... !DIExpression()), !dbg !2973\l  %aio_fildes = getelementptr inbounds i8, i8* %opaque, i64 12, !dbg !2980\l  %4 = bitcast i8* %aio_fildes to i32*, !dbg !2980\l  %5 = load i32, i32* %4, align 4, !dbg !2980\l  %call = tail call i32 @qemu_fdatasync(i32 %5) #20, !dbg !2981\l  call void @llvm.dbg.value(metadata i32 %call, metadata !2970, metadata\l... !DIExpression()), !dbg !2973\l  %cmp = icmp eq i32 %call, -1, !dbg !2982\l  br i1 %cmp, label %if.then2, label %cleanup, !dbg !2984, !prof !2985\l|{<s0>T|<s1>F}}"];
	Node0x555823266330:s0 -> Node0x555823267c60;
	Node0x555823266330:s1 -> Node0x555823266da0;
	Node0x555823267c60 [shape=record,penwidth=3.0, style="filled", color="red", fillcolor="yellow",label="{if.then2:                                         \l  %open_flags = getelementptr inbounds %struct.BDRVRawState,\l... %struct.BDRVRawState* %2, i64 0, i32 3, !dbg !2986\l  %6 = load i32, i32* %open_flags, align 4, !dbg !2986\l  %and = and i32 %6, 16384, !dbg !2989\l  %cmp3 = icmp eq i32 %and, 0, !dbg !2990\l  br i1 %cmp3, label %if.then4, label %if.end8, !dbg !2991\l|{<s0>T|<s1>F}}"];
	Node0x555823267c60:s0 -> Node0x555823267fd0;
	Node0x555823267c60:s1 -> Node0x555823268020;
	Node0x555823267fd0 [shape=record,penwidth=3.0, style="filled", color="red", fillcolor="yellow",label="{if.then4:                                         \l  %bf.load6 = load i8, i8* %page_cache_inconsistent, align 8, !dbg !2992\l  %bf.set = or i8 %bf.load6, 32, !dbg !2992\l  store i8 %bf.set, i8* %page_cache_inconsistent, align 8, !dbg !2992\l  br label %if.end8, !dbg !2994\l}"];
	Node0x555823267fd0 -> Node0x555823268020;
	Node0x555823268020 [shape=record,penwidth=3.0, style="filled", color="red", fillcolor="yellow",label="{if.end8:                                          \l  %call9 = tail call i32* @__errno_location() #21, !dbg !2995\l  %7 = load i32, i32* %call9, align 4, !dbg !2995\l  %sub = sub i32 0, %7, !dbg !2996\l  br label %cleanup, !dbg !2997\l}"];
	Node0x555823268020 -> Node0x555823266da0;
	Node0x555823266da0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{cleanup:                                          \l  %retval.0 = phi i32 [ %sub, %if.end8 ], [ -5, %entry ], [ 0, %if.end ], !dbg\l... !2973\l  ret i32 %retval.0, !dbg !2998\l}"];
}
